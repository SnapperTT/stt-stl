#hdr
#if __has_include(<span>) && defined(__cplusplus) && __cplusplus >= 202002L && STT_STL_USE_STD_SPAN_IF_AVAILIABLE
	#include <span>
namespace stt {
	template <typename T>
	using span = std::span<T>;
	}
#else
namespace stt {
	// Custom span replacement for C++17 and earlier
	template <typename T>
	class span {
	public:
		using element_type = T;
		using value_type = std::remove_cv_t<T>;
		using size_type = std::size_t;
		using difference_type = std::ptrdiff_t;
		using pointer = T*;
		using reference = T&;
		using iterator = T*;
		using const_iterator = const T*;

		constexpr span() noexcept : ptr_(nullptr), size_(0) {}
		constexpr span(T* ptr, size_type size) noexcept : ptr_(ptr), size_(size) {}
		
		template <std::size_t N>
		constexpr span(T (&arr)[N]) noexcept : ptr_(arr), size_(N) {}
		
		template <typename Container,
				  typename = std::enable_if_t<!std::is_array_v<Container> && std::is_convertible_v<decltype(std::declval<Container&>().data()), T*>>>
		constexpr span(Container& container) noexcept : ptr_(container.data()), size_(container.size()) {}

		constexpr size_type size() const noexcept { return size_; }
		constexpr bool empty() const noexcept { return size_ == 0; }

		constexpr T& operator[](size_type index) const { return ptr_[index]; }
		constexpr T* data() const noexcept { return ptr_; }

		constexpr iterator begin() const noexcept { return ptr_; }
		constexpr iterator end() const noexcept { return ptr_ + size_; }
		
		constexpr span<T> first(size_type count) const noexcept { return {ptr_, count}; }
		constexpr span<T> last(size_type count) const noexcept { return {ptr_ + (size_ - count), count}; }
		constexpr span<T> subspan(size_type offset, size_type count = static_cast<size_type>(-1)) const noexcept {
			return {ptr_ + offset, (count == static_cast<size_type>(-1)) ? size_ - offset : count};
		}

	protected:
		T* ptr_;
		size_type size_;
		};
}
#endif // __has_include(<span>) && defined(__cplusplus) && __cplusplus >= 202002L
#end

#src

#end
