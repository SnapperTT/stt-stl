#hdr
#ifndef STT_PAGE_HEADER_SIZE
	#define STT_PAGE_HEADER_SIZE 64
#endif
#ifndef STT_PAGE_SIZE
	#define STT_PAGE_SIZE 4080	// this makes alignement better 
#endif
#ifndef STT_JUMBO_PAGE_SIZE
	#define STT_JUMBO_PAGE_SIZE 65520
#endif

	
#end

#src

namespace stt {
	static_assert(sizeof(pageHeader) <= STT_PAGE_HEADER_SIZE);
	}
#end

// A page is a fixed size block of memory
// the idea is that pages are allocated once then recycled

namespace stt {
	enum pageTypeEnum {
		PAGE_TYPE_NORMAL,
		PAGE_TYPE_JUMBO,
		PAGE_TYPE_UNSET
		};
		
	const char * pageTypeEnumToString(const pageTypeEnum pt) {
		switch (pt) {
			case pageTypeEnum::PAGE_TYPE_NORMAL: return "Normal";
			case pageTypeEnum::PAGE_TYPE_JUMBO: return "Jumbo";
			default: return "Unset";
			}
		}
	
	struct pageHeader {
		// note: not all fields are used!
		//void* allocator;			  // (unused) what object controls the lifetime of this? If NULL then it is assumed that the global ThreadSafePageAllocatorImpl handles this
		pageHeader* next;			  // next page
		pageHeader* cachedWorkingEnd; // (optional) if this is the head of a linked list then this is the end page, otherwise this is undefiend
		uint64_t allocationInfo;	  // 
		uint32_t localSize;			  // (optional) if this page is an array then this is the local size of the array
		uint32_t totalSize;			  // (optional) if this is the head of a linked list of arrays then this is the running total
		uint64_t useMask;			  // (optional) if this page is an bitmap then this is indicates which elements are used 
		uint64_t _unused[3];
		
		inline void initToZero() {
			//allocator = NULL;
			next = NULL;
			cachedWorkingEnd = NULL;
			allocationInfo = 0;
			localSize = 0;
			totalSize = 0;
			useMask = 0;
			}
		
		void appendList(pageHeader* other) {
			// appends other to this list
			// assumes cachedWorkingEnd is a valid value for both this and othe
			// assumes other is not null
			cachedWorkingEnd->next = other;
			cachedWorkingEnd = other->cachedWorkingEnd;
			}
			
		pageHeader* splitList(const uint32_t nPages) {
			// assumes cachedWorkingEnd is a valid value for this
			// if this is too short then returns NULL
			pageHeader* w = this;
			uint32_t cnt = 1;
			while (w->next && (cnt < nPages)) {
				cnt++;
				w = w->next;
				}
			// w should now be the end of this list
			// and w->next should be the start of next
			if (!w) return NULL; // fail split
			if (!w->next) return NULL; // fail split
			
			pageHeader* r = w->next;
			r->cachedWorkingEnd = cachedWorkingEnd;
			w->next = NULL;
			cachedWorkingEnd = w;
			return r;
			}
		
		static pageHeader* buildList(pageHeader** pages, const uint32_t nPages) {
			// assembles pages into a linked list, returns the head
			if (!nPages) return NULL;
			for (uint32_t i = 0; i < nPages-1; ++i) {
				pages[i]->next = pages[i+1];
				}
			pages[nPages-1]->next = NULL;
			pages[0]->cachedWorkingEnd = pages[nPages-1];
			return pages[0];
			}
		
		pageHeader* end() {
			// manually traverses to the end
			pageHeader* w = this;
			while (w->next) { w = w->next; }
			return w;
			}
			
		pageHeader* endCounting(int& countOut) {
			// manually traverses to the end, counts number of pages
			pageHeader* w = this;
			countOut++;
			while (w->next) { w = w->next; countOut++; }
			return w;
			}
			
		pageHeader* endCountingDumping(int& countOut) {
			pageHeader* w = this;
			countOut++;
			while (w->next) {
				w = w->next;
				#ifdef STT_STL_DEBUG
				stt_dbg_log("\t\tendCountingDumping %p %i deep is %p\n", this, countOut, w);
				#endif
				countOut++; 
				}
			return w;
			}
			
		int listLength() {
			int cnt = 0;
			endCounting(cnt);
			return cnt;
			}
			
		inline uint8_t* toPayload() {
			uint8_t* ptr = (uint8_t*) this;
			return &ptr[STT_PAGE_HEADER_SIZE];
			}
		
		inline static pageHeader* fromPayload(uint8_t* ptr) {
			// Reverse operation of pageU::ptr(), takes a page's data pointer and returns the address of the header
			return (pageHeader*) &ptr[-STT_PAGE_HEADER_SIZE];
			}
		};
	
	
	template<unsigned int SIZE, pageTypeEnum ET>
	union pageTemplate {
		pageHeader ph;
		uint8_t _data[SIZE];
		
		inline void initHeader() { ph.initToZero(); ph.allocationInfo = SIZE; }
		STT_CONSTEXPR__uint8_t* ptr()             { return &_data[STT_PAGE_HEADER_SIZE]; }
		const STT_CONSTEXPR__uint8_t* ptr() const { return &_data[STT_PAGE_HEADER_SIZE]; }
		static STT_CONSTEXPR__size_t capacity() { return SIZE - STT_PAGE_HEADER_SIZE;  }
		static STT_CONSTEXPR__size_t storageSize() { return SIZE;  }
		static STT_CONSTEXPR__pageTypeEnum getPageType() { return ET; }
		};
	
	typedef pageTemplate<STT_PAGE_SIZE, pageTypeEnum::PAGE_TYPE_NORMAL> pageU;
	typedef pageTemplate<STT_JUMBO_PAGE_SIZE, pageTypeEnum::PAGE_TYPE_JUMBO> jumboPageU;
		
	
	//template <unsigned int USZ>
	//union unboundedPageI {
	//	pageHeader ph;
	//	uint8_t _data[USZ];
	//	
	//	STT_CONSTEXPR__void* ptr()             { return &_data[STT_PAGE_HEADER_SIZE]; }
	//	const STT_CONSTEXPR__void* ptr() const { return &_data[STT_PAGE_HEADER_SIZE]; }
	//	static STT_CONSTEXPR__size_t capacity() { return STT_PAGE_SIZE - STT_PAGE_HEADER_SIZE;  }
	//	};

	}
