.DEFAULT_GOAL := all

# make with STTR with make USE_STTR=ON or make sttr
USE_STTR=

LAZY=../../lzz-bin/lzz -hx hh
# Files are combined into single header
RAWSOURCES=example.lzz config.lzz common.lzz allocator.lzz storage.lzz sso.lzz page.lzz vector.lzz string.lzz benchmark_tests.lzz mt_page_allocator.lzz page_queue.lzz page.lzz
SINGLEHEADER_SRC=config.h2 common.h2 allocator.h2 storage.h2 sso.h2 page.h2 vector.h2 string.h2
SINGLEHEADER_OUT=stt-stl.h
# Pages optional sub-module
PAGES_SRC=mt_page_allocator.h2 page_queue.h2 page.h2
PAGES_OUT=stt-pages.h
# Files that are discrete files 
EXTRAHEADER_H=benchmark_tests.h2
EXTRAHEADER_CPP=example.h2
OUTPUTDIR=../
OUTPUTDIR_STTR=../vgui_sttr/
TEMPDIR=temp/
TEMPDIR_STTR=temp_sttr/
STTR_FLAG=
ifeq ($(USE_STTR),ON)
	OUTPUTDIR=$(OUTPUTDIR_STTR)
	TEMPDIR=$(TEMPDIR_STTR)
	STTR_FLAG=-DSTTR_ENABLED=1
endif
SOURCES=$(addprefix $(TEMPDIR), $(RAWSOURCES:.lzz=.cpp))
SFI=$(addprefix $(OUTPUTDIR), $(RAWSOURCES:.lzz=.h))
OSINGLEHEADER_OUT=$(OUTPUTDIR)$(SINGLEHEADER_OUT)
OPAGES_OUT=$(OUTPUTDIR)$(PAGES_OUT)
OEXTRAHEADER_OUT=$(addprefix $(OUTPUTDIR), $(EXTRAHEADER_H:.h2=.h)) $(addprefix $(OUTPUTDIR), $(EXTRAHEADER_CPP:.h2=.cpp))

########################################################################
# Phoney Rules
.PHONY: all
all:
	$(MAKE) all_base
#	$(MAKE) sttr

.PHONY: all_base
all_base: $(OSINGLEHEADER_OUT) $(OEXTRAHEADER_OUT) $(OPAGES_OUT) $(OUTPUTDIR)
	@echo Done

.PHONY: sttr
sttr:
	$(MAKE) USE_STTR=ON all_base

.PHONY: clean
clean:
	rm -rf $(TEMPDIR)*
	rm -rf $(TEMPDIR_STTR)*
	
.PHONY: nuke
nuke: clean
	rm -rf $(OUTPUTDIR)/*.h $(OUTPUTDIR)/*.cpp
	rm -rf $(OUTPUTDIR_STTR)/*.h $(OUTPUTDIR_STTR)/*.cpp 

########################################################################
$(OUTPUTDIR):
	@mkdir -p $(OUTPUTDIR)

$(TEMPDIR)%.cpp $(TEMPDIR)%.hh: %.lzz $(SUBSOURCES)
	@mkdir -p $(TEMPDIR)$(dir $<)
	$(LAZY) $(STTR_FLAG) -o $(TEMPDIR)$(dir $<) $<

$(OSINGLEHEADER_OUT): $(addprefix $(TEMPDIR), $(SINGLEHEADER_SRC)) $(OUTPUTDIR)
	cat $(addprefix $(TEMPDIR), $(SINGLEHEADER_SRC)) > $(OSINGLEHEADER_OUT)
	
$(OPAGES_OUT): $(addprefix $(TEMPDIR), $(PAGES_SRC)) $(OUTPUTDIR)
	cat $(addprefix $(TEMPDIR), $(PAGES_SRC)) > $(OPAGES_OUT)

$(OUTPUTDIR)%.h: $(TEMPDIR)%.h2 $(OUTPUTDIR)
	mv -f $< $@
	
$(OUTPUTDIR)%.cpp: $(TEMPDIR)%.h2 $(OUTPUTDIR)
	mv -f $< $@
	
########################################################################
# Concatenate the .cpp and .hh files into a single header
# and enable the STT_STL_IMPL macro
# then remove any instance of #include "filename.hh" that
# lzz has added
$(TEMPDIR)%.h2: $(TEMPDIR)%.cpp $(TEMPDIR)%.hh
	echo '// This file is autogenerated. See look at the .lzz files in the src/ directory for a more human-friendly version' > $@
	echo '#ifndef LZZ_OVERRIDE' >> $@
	echo '	#define LZZ_OVERRIDE override' >> $@
	echo '#endif' >> $@
	cat $(TEMPDIR)$*.hh >> $@
	echo '#undef LZZ_OVERRIDE' >> $@
	echo '' >> $@
	echo '////////////////////////////////////////////////////////////////////////' >> $@
	echo '' >> $@
	echo '#ifdef STT_STL_IMPL' >> $@
	echo '#ifndef STT_STL_IMPL_DOUBLE_GUARD_$(subst /,_,$(subst \\,_,$*))' >> $@
	echo '#define STT_STL_IMPL_DOUBLE_GUARD_$(subst /,_,$(subst \\,_,$*))' >> $@
	echo '#define LZZ_OVERRIDE' >> $@
	cat $(TEMPDIR)$*.cpp >> $@
	echo '#undef LZZ_OVERRIDE' >> $@
	echo '#endif //STT_STL_IMPL_DOUBLE_GUARD_$(subst /,_,$(subst \\,_,$*))' >> $@
	echo '#endif //STT_STL_IMPL_IMPL' >> $@
	sed -i '/#include ".*\.hh"/d' $@ 
	sed -i -e "s/__NOEXCEPT)/) noexcept/g" $@
	sed -i -e "s/__NOEXCEPT_OVERRIDE)/) noexcept LZZ_OVERRIDE/g" $@
	sed -i -e "s/__NOEXCEPTDEFAULT)/) noexcept = default/g" $@
	sed -i -e "s/STT_CONSTEXPR__/constexpr /g" $@
	sed -i -e "s/STT_CONSTEXPR_C__/constexpr const /g" $@
	sed -i -e "s/__MVSEM/\&\&/g" $@
