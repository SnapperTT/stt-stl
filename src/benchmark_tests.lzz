#hdr
#define ANKERL_NANOBENCH_IMPLEMENT
#include "3rd_party/nanobench.h"

#define STT_STL_BENCHMARK(BENCH, FUNC, TYPE) stt_benchmarks::FUNC<TYPE> (BENCH, #FUNC " " #TYPE);
#define STT_STL_BENCHMARK2(BENCH, FUNC, TYPE1, TYPE2) stt_benchmarks::FUNC<TYPE1, TYPE2> (BENCH, #FUNC " " #TYPE1);

#define STT_NESTED_TEMPLATE_T __unused, template <typename...> class T

#include <string>
#if __cplusplus >= 202002L
	#include <span>
	#define HAS_SPAN 1
	namespace stt {
		template <typename T>
		using span = std::span<T>
		}
#else
	#define HAS_SPAN 0
#endif
namespace stt {
	typedef std::string string;
	}
#end

#src
#end

namespace stt_benchmarks {
	struct nullContainer {
		};
	
	struct nonTrivialSmallClass {
		int value;
		
		nonTrivialSmallClass() {}
		nonTrivialSmallClass(const int v) : value (v) {}
		
		nonTrivialSmallClass(const nonTrivialSmallClass & other) { value = other.value; }
		nonTrivialSmallClass& operator = (const nonTrivialSmallClass & other) { value = other.value; return *this; } 
		};

	struct nonTrivialBigClass {
		int value[64];
		
		nonTrivialBigClass() {}
		nonTrivialBigClass(const int v) { value[0] = v; }
		
		nonTrivialBigClass(const nonTrivialBigClass & other) { value[0] = other.value[0]; }
		nonTrivialBigClass& operator = (const nonTrivialBigClass & other) { value[0] = other.value[0]; return *this; } 
		};
	
	template <typename T>
	void benchmarkConstruct(ankerl::nanobench::Bench* bench, char const* name) {
		bench->run(name, [&]() {
			T t;
			ankerl::nanobench::doNotOptimizeAway(t);
			});
		}
	
	template <typename T, typename V, const int numToInsert>
	void benchmarkPushBack(ankerl::nanobench::Bench* bench, const V & v, char const* name) {
		// Tests push_back with constant value
		ankerl::nanobench::doNotOptimizeAway(numToInsert);
		bench->run(name, [&]() {
			T t;
			for (int i = 0; i < numToInsert; ++i) {
				t.push_back(v);
				ankerl::nanobench::doNotOptimizeAway(t);
				}
			});
		}
		
	template <typename T, typename V, const int numToInsert>
	void benchmarkSeqRead(ankerl::nanobench::Bench* bench, const V & v, char const* name) {
		// Tests sequential read
		ankerl::nanobench::doNotOptimizeAway(numToInsert);
		T t;
		for (int i = 0; i < numToInsert; ++i) {
			t.push_back(v);
			}
		ankerl::nanobench::doNotOptimizeAway(t);
		
		bench->run(name, [&]() {
			const T & t2 = t;
			for (int i = 0; i < numToInsert; ++i) {
				V vtemp = t2[i];
				//ankerl::nanobench::doNotOptimizeAway(t); // Compiler can optimise away std::vector operator[], but cannot optimise away operator[] for stt::vector
				ankerl::nanobench::doNotOptimizeAway(vtemp);
				}
			});
		}
		
	template <typename T, typename V, const int numToInsert>
	void benchmarkSeqReadPrefetch(ankerl::nanobench::Bench* bench, const V & v, char const* name) {
		// Tests sequential read
		#if HAS_SPAN
		ankerl::nanobench::doNotOptimizeAway(numToInsert);
		T t;
		for (int i = 0; i < numToInsert; ++i) {
			t.push_back(v);
			}
		ankerl::nanobench::doNotOptimizeAway(t);
		
		bench->run(name, [&]() {
			stt::span<V> d(t.data(), t.size());
			for (int i = 0; i < numToInsert; ++i) {
				V vtemp = d[i];
				ankerl::nanobench::doNotOptimizeAway(vtemp);
				}
			});
		#endif
		}
		
		
	template <typename T>
	void call_dbg_printf(const T & t) {
		t.sso.dbg_printf();
		}
	void call_dbg_printf(const std::vector<int> & t) {}
		
	template <typename T, typename V, const int numToInsert>
	void benchmarkRangeSeqRead(ankerl::nanobench::Bench* bench, const V & v, char const* name) {
		// Tests sequential read, but cacheing the data() array
		ankerl::nanobench::doNotOptimizeAway(numToInsert);
		T t;
		for (int i = 0; i < numToInsert; ++i) {
			t.push_back(v);
			}
		ankerl::nanobench::doNotOptimizeAway(t);
		
		bench->run(name, [&]() {
			for (const auto & vv : t) {
				ankerl::nanobench::doNotOptimizeAway(vv);
				}
			});
		}
		
	template <typename T, typename V, const int numToInsert>
	void benchmarkRangeCItterSeqRead(ankerl::nanobench::Bench* bench, const V & v, char const* name) {
		// Tests sequential read, but cacheing the data() array
		ankerl::nanobench::doNotOptimizeAway(numToInsert);
		T t;
		for (int i = 0; i < numToInsert; ++i) {
			t.push_back(v);
			}
		ankerl::nanobench::doNotOptimizeAway(t);
		
		bench->run(name, [&]() {
			auto cb = t.cbegin();
			auto ce = t.cend();
			for (auto itt = cb; itt != ce; ++itt) {
				auto & vv = *itt;
				ankerl::nanobench::doNotOptimizeAway(vv);
				}
			});
		
		}
	
		
	template <typename STT_NESTED_TEMPLATE_T>
	const char* vectorTests(ankerl::nanobench::Bench* bench, const char* label, const int testId) {
		// pass NULL as the label
		constexpr bool isTest = !std::is_same<__unused, nullContainer>::value;
		
		//if (testId > 8 || testId < 5) return "(null)";
		switch (testId) {
			case 0:
				if constexpr (isTest) benchmarkPushBack<T<int>, int, 4>(bench, 1, label);
				return "push_back int 4";
			
			case 1:
				if constexpr (isTest) benchmarkPushBack<T<int>, int, 32>(bench, 1, label);
				return "push_back int 32";
				
			case 2:
				if constexpr (isTest) benchmarkPushBack<T<int>, int, 1000000>(bench, 1, label);
				return "push_back int 1,000,000";
				
			case 3:
				if constexpr (isTest) benchmarkPushBack<T<nonTrivialBigClass>, nonTrivialBigClass, 32>(bench, nonTrivialBigClass(3), label);
				return "push_back nonTrivialBigClass 32";
				
			case 4:
				if constexpr (isTest) benchmarkPushBack<T<nonTrivialBigClass>, nonTrivialBigClass, 1000000>(bench, nonTrivialBigClass(4), label);
				return "push_back nonTrivialBigClass 1,000,000";
				
			// read tests
			case 5:
				if constexpr (isTest) benchmarkSeqRead<T<int>, int, 4>(bench, 1, label);
				return "read int 4";
				
			case 6:
				if constexpr (isTest) benchmarkSeqRead<T<int>, int, 32>(bench, 1, label);
				return "read int 32";
			#if HAS_SPAN
			case 7:
				if constexpr (isTest) benchmarkSeqReadPrefetch<T<int>, int, 32>(bench, 1, label);
				return "read int 32 (span)";
			#endif
			case 8:
				if constexpr (isTest) benchmarkSeqRead<T<int>, int, 10000000>(bench, 1, label);
				return "read int 1,000,000";
				
			// range read
			case 9:
				if constexpr (isTest) benchmarkRangeSeqRead<T<int>, int, 4>(bench, 1, label);
				return "range read int 4";
				
			case 10:
				if constexpr (isTest) benchmarkRangeSeqRead<T<int>, int, 32>(bench, 1, label);
				return "range read int 32";
				
			case 11:
				if constexpr (isTest) benchmarkRangeSeqRead<T<int>, int, 10000000>(bench, 1, label);
				return "range read int 1,000,000";
				
			case 12:
				if constexpr (isTest) benchmarkRangeCItterSeqRead<T<int>, int, 4>(bench, 1, label);
				return "cItter range read int 4";
				
			case 13:
				if constexpr (isTest) benchmarkRangeCItterSeqRead<T<int>, int, 32>(bench, 1, label);
				return "cItter range read int 32";
				
			case 14:
				if constexpr (isTest) benchmarkRangeCItterSeqRead<T<int>, int, 10000000>(bench, 1, label);
				return "cItter range read int 1,000,000";
			}
		
		return "(null)";
		}
		
	// =================================================================
	// Strings
	
	template <typename STR, const int batchSize, const int numToInsert>
	void benchmarkStringAppend(ankerl::nanobench::Bench* bench, char const* name) {
		// Tests append with constant value
		STR test = STR(batchSize, 'a');
		ankerl::nanobench::doNotOptimizeAway(numToInsert);
		ankerl::nanobench::doNotOptimizeAway(test);
		
		bench->run(name, [&]() {
			STR s;
			for (int i = 0; i < numToInsert; ++i)
				s.append(test);
			ankerl::nanobench::doNotOptimizeAway(s);
			});
		}
		
	template <typename STR, const int batchSize>
	void benchmarkStringFind(ankerl::nanobench::Bench* bench, char const* name) {
		// Tests looking up words in a test string
		STR s = "the quick brown fox jumped over the lazy log";
		
		const char * a1 = "the";
		const char * a2 = "quick";
		const char * a3 = "brown";
		const char * a4 = "fox";
		const char * a5 = "jumped";
		const char * a6 = "over";
		const char * a7 = "lazy";
		const char * a8 = "dog";
		
		const char* keys[8] = { a1, a2, a3, a4, a5, a6, a7, a8 };
		
		bench->run(name, [&]() {
			for (int i = 0; i < batchSize; ++i) {
				auto findex = s.find(keys[i%8]);
				ankerl::nanobench::doNotOptimizeAway(findex);
				}
			});
		}
		
	template <typename STR, const int batchSize>
	void benchmarkStringInsert(ankerl::nanobench::Bench* bench, char const* name) {
		// Tests inserting words into a string
		
		const char * a1 = "the";
		const char * a2 = "quick";
		const char * a3 = "brown";
		const char * a4 = "fox";
		const char * a5 = "jumped";
		const char * a6 = "over";
		const char * a7 = "lazy";
		const char * a8 = "dog";
		
		const char* keys[8] = { a1, a2, a3, a4, a5, a6, a7, a8 };
		
		bench->run(name, [&]() {
			STR s = "the quick brown fox jumped over the lazy log";
			for (int i = 0; i < batchSize; ++i) {
				s.insert(i, keys[i%8]);
				ankerl::nanobench::doNotOptimizeAway(s);
				}
			});
		}
		
	template <typename STR, const int batchSize>
	void benchmarkStringErase(ankerl::nanobench::Bench* bench, char const* name) {
		// Erases 32 characters from a string character by character
		bench->run(name, [&]() {
			STR s = "the quick brown fox jumped over the lazy log";
			for (int i = 0; i < batchSize; ++i) {
				s.erase(batchSize - i, 1);
				ankerl::nanobench::doNotOptimizeAway(s);
				}
			});
		}
		
	template <typename __unused, typename STR>
	const char* stringTests(ankerl::nanobench::Bench* bench, const char* label, const int testId) {
		// pass NULL as the label
		return "(null)";
		constexpr bool isTest = !std::is_same<__unused, nullContainer>::value;
		
		switch (testId) {
			// push_back tests:
			case 0:
				if constexpr (isTest) benchmarkStringAppend<STR, 4, 4>(bench, label);
				return "append 4x4";
				
			case 1:
				if constexpr (isTest) benchmarkStringAppend<STR, 4, 32>(bench, label);
				return "append 4x32";
				
			case 2:
				if constexpr (isTest) benchmarkStringAppend<STR, 4, 1000000>(bench, label);
				return "append 4x1,000,000";
				
			case 3:
				if constexpr (isTest) benchmarkStringFind<STR, 64>(bench, label);
				return "find x64";
				
			case 4:
				if constexpr (isTest) benchmarkStringInsert<STR, 64>(bench, label);
				return "insert x64";
				
			case 5:
				if constexpr (isTest) benchmarkStringErase<STR, 32>(bench, label);
				return "erase x32";
			}
		return "(null)";
		}
	}
