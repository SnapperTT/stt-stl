#hdr

#ifndef STT_TLS_WRAPPER
	#ifdef __WIN32
		#define STT_TLS_WRAPPER WindowsThreadLocalWrapper
		#define STT_WINDOWS_TLS 1
		#define STT_thread_local_PATL_Data int
		#define STT_DWORD DWORD
	#else
		#define STT_TLS_WRAPPER NativeThreadLocalWrapper
	#endif
#endif
#ifndef STT_thread_local_PATL_Data
	#define STT_thread_local_PATL_Data thread_local PATL_Data
#endif
#ifndef STT_DWORD
	#define STT_DWORD int
#endif

#if defined(STT_PASSTHROUGH_TL_PAGE_ALLOCATOR)
	#define STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_IMPL 1
#elif defined(STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_BACKEND)
	#define STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_IMPL 1
#endif

namespace stt {
	struct PATL_Data;
	int dbg_getNPagesAllocated_forward();
	}
	
#include <mutex>
#include <atomic>
#if STT_STL_DEBUG_PAGE
	#include <thread>
#endif
#end

#src
#end

namespace stt {
struct PATL_Data; // Page Allocacator Thread Local Data

////////////////////////////////////////////////////////////////////////
// wrapper around thread_local keyword (which is very broken in the wild)
struct NativeThreadLocalWrapper {
	// Use on platforms/compilers where "thread_local" keyword actually works
	static STT_thread_local_PATL_Data* mData;
	
	inline PATL_Data* getTlsData() { return mData; }
	inline void setTlsData(PATL_Data* ptr) { mData = ptr; }
	};
	
struct WindowsThreadLocalWrapper {
	// Implement the windows TLS api here
	STT_DWORD dwTlsIndex;
	
	WindowsThreadLocalWrapper() {
		dwTlsIndex = 0;
		#ifdef STT_WINDOWS_TLS
		dwTlsIndex = TlsAlloc();
		if (dwTlsIndex == TLS_OUT_OF_INDEXES)
			STT_STL_ABORT();
		#endif
		}
	~WindowsThreadLocalWrapper() {
		#ifdef STT_WINDOWS_TLS
		TlsFree(dwTlsIndex);
		#endif
		}
	
	inline PATL_Data* getTlsData() {
		#ifdef STT_WINDOWS_TLS
		return (PATL_Data*) TlsGetValue(dwTlsIndex);
		#else
		return NULL;
		#endif
		}
	inline void setTlsData(PATL_Data* ptr) {
		#ifdef STT_WINDOWS_TLS
		TlsSetValue(dwTlsIndex, ptr);
		#endif
		}
	};


class BackendPagePool;
class ThreadLocalPagePool;



class BackendPagePool {
public:
	// Can be accessed from multiple threads
	// This feeds pages from the system -> local pool -> thead_local pageAllocatorI's
	// allocation is locking but free'ing is lock free
	pageTypeEnum mPageType;
	uint32_t batchSize;	// when system allocation how many pages to alloc?
	
	// Locked alloc
	pageHeader* allocFreeList; // freeList of avaliable pages, used for allocations
	std::mutex mMutex;	// could be made lock free with an atomic bitmap
	
	// Multithreaded lock free return
	std::atomic<pageHeader*> _list; // used for deletions
	
	BackendPagePool() {
		mPageType = pageTypeEnum::PAGE_TYPE_UNSET;
		batchSize = 1; // really set in ThreadSafeAllocatorImpl()
		
		allocFreeList = NULL;
		_list = NULL;
		}
		
	~BackendPagePool() {
		#if STT_STL_DEBUG_PAGE
		stt_dbg_log("~BackendPagePool %s\n", pageTypeEnumToString(mPageType));
		dbg_print_status();
		#endif
		freeAllToSystem();
		}
		
	
	void init (const pageTypeEnum _pageType, const uint32_t _batchSize) {
		mPageType = _pageType;
		batchSize = _batchSize;
		}
		
	void dbg_print_status() {
		mMutex.lock();
		pageHeader* h = atomicTake();
		stt_dbg_log("\tBackendPagePool (%s): %p, %i -- %p, %i\n", pageTypeEnumToString(mPageType), allocFreeList, allocFreeList ? allocFreeList->listLength() : 0, h, h ? h->listLength() : 0);
		if (h) atomicMerge(h);
		mMutex.unlock();
		}
	
	void freeAllToSystem() {
		// Takes all pages held here and deallocates them
		mMutex.lock();
		pageHeader* h = atomicTake();
		#if STT_STL_DEBUG_PAGE
		stt_dbg_log("BackendPagePool freeAll IN: h: %p, allocFreeList: %p\n", h, allocFreeList);
		#endif
		if (h) {
			if (allocFreeList)
				allocFreeList->appendList(h);
			else
				allocFreeList = h;
			}
		#if STT_STL_DEBUG_PAGE
		stt_dbg_log("BackendPagePool freeAll: allocFreeList %p\n", allocFreeList);
		#endif
		ThreadSafePageAllocatorImpl::systemFreeList(allocFreeList);
		allocFreeList = NULL;
		mMutex.unlock();
		}
	
	void freePages(pageHeader** pages, const uint32_t nPages) {
		// For the situation where we have an array of pages
		if (!nPages) return;
		atomicMerge(pageHeader::buildList(pages, nPages), nPages);
		}
		
	inline void atomicMerge(pageHeader* _insert, const uint32_t _nReturned) {
		#if STT_STL_DEBUG_PAGE
		stt_dbg_log("BackendPagePool atomicMerge: %p %i\n", _insert, _nReturned);
		#endif
		atomicMerge(_insert);
		}
		
	void atomicMerge(pageHeader* _insert) {
		// Adds @_insert to the atomic free list @this->_list
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_BACKEND
			if (mPageType == pageTypeEnum::PAGE_TYPE_NORMAL)
				PassthroughPageAllocator::freeGenericList<pageU>(_insert);
			else if (mPageType == pageTypeEnum::PAGE_TYPE_JUMBO)
				PassthroughPageAllocator::freeGenericList<jumboPageU>(_insert);
			else
				STT_STL_ABORT();
			return;
		#endif
		// Remove head from atomic to working memory
		pageHeader* workingList = atomicTake();
		// _list is now NULL
		
		#if STT_STL_DEBUG_PAGE
			int wll = workingList ? workingList->listLength() : 0;
			int ill = _insert ? _insert->listLength() : 0;
		#endif
		
		// merge the lists
		if (workingList)
			_insert->appendList(workingList);
		workingList = _insert;
		
		#if STT_STL_DEBUG_PAGE
			int wll2 = workingList ? workingList->listLength() : 0;
			stt_dbg_log("BackendPagePool atomicMerge impl, list lengths: %i + %i => %i\n", wll, ill, wll2);
			//abort();
		#endif
		
		// replace NULL head with the working list
		pageHeader* nullList = NULL;
		if (!_list.compare_exchange_strong(nullList, workingList)) {
			// failed merge, this must have been due to pre-emption, re-merge
			atomicMerge(workingList);
			}
		}

	pageHeader* atomicTake () {
		// Reads the value of @_list and replaces it with NULL
		pageHeader* workingList = _list.load();
		while (!_list.compare_exchange_weak(workingList, NULL));
		return workingList; 
		}
	
	void bulkFetch(pageHeader** store, const uint32_t nPages) {
		// Yank off atomic list and merge the linked lists
		if (!nPages) return;
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_BACKEND
			if (mPageType == pageTypeEnum::PAGE_TYPE_NORMAL)
				PassthroughPageAllocator::allocGeneric<pageU>(store, nPages);
			else if (mPageType == pageTypeEnum::PAGE_TYPE_JUMBO)
				PassthroughPageAllocator::allocGeneric<jumboPageU>(store, nPages);
			else
				STT_STL_ABORT();
			for (uint32_t i = 1; i < nPages; ++i) {
				store[i-1]->next = store[i];
				}
			store[nPages-1]->next = NULL;
			store[0]->cachedWorkingEnd = store[nPages-1];
			return;
		#endif
		
		pageHeader* h = atomicTake();
		mMutex.lock();
		
		#if STT_STL_DEBUG_PAGE
		{
			const int l1 = allocFreeList ? allocFreeList->listLength() : 0;
			const int l2 = h ? h->listLength() : 0;
			stt_dbg_log ("BackendPagePool: bulkFetch in, request: %i,  allocFreeList len: %i, allocFreeList len: %i, total free: %i, total system allocated: %i\n", nPages, l1, l2, l1 + l2, stt::dbg_getNPagesAllocated_forward());
		}
		#endif
			
		if (h) {
			if (allocFreeList)
				allocFreeList->appendList(h);
			else
				allocFreeList = h;
			}
		
		pageHeader* w = allocFreeList;
		uint32_t i = 0;
		if (w) {
			for (i = 0; i < nPages && w->next; ++i) {
				store[i] = w;
				w = w->next;
				}
			}
			
		const uint32_t nAllocated = i;
		if (i == nPages) {
			// cut the linked list here
			pageHeader* newHead = w;//->next;
			store[nPages-1]->next = NULL;
			store[nPages-1]->cachedWorkingEnd = NULL;
			if (newHead)
				newHead->cachedWorkingEnd = allocFreeList->cachedWorkingEnd;
			allocFreeList = newHead;
			mMutex.unlock();
			
			store[nPages-1]->next = NULL;
			
			
			#if STT_STL_DEBUG_PAGE
				stt_dbg_log ("BackendPagePool: bulkFetch out path a, %i pages allocated\n", i);
			#endif
			return;
			}
		
		// we have a parital linked list, we need system allocation
		pageHeader* remaining = NULL;
		pageHeader* leftovers = NULL;
		const uint32_t nPagesToSystemAllocate = (batchSize + nPages - nAllocated);
		const uint32_t nSplit =  nPages - nAllocated;
		ThreadSafePageAllocatorImpl::systemAllocate(mPageType, nPagesToSystemAllocate, nSplit, &remaining, &leftovers);
		
		if (i)
			store[i-1]->next = remaining;
		for (; i < nPages; ++i) {
			#if STT_STL_DEBUG_PAGE
				STT_STL_ASSERT(remaining, "remaining is not valid");
			#endif
			store[i] = remaining;
			remaining = remaining->next;
			}
		store[nPages-1]->next = NULL;
		
		// the entire free list has been consumed so we can dispose of it here
		//allocFreeList = leftovers;
		
		#if STT_STL_DEBUG_PAGE
		stt_dbg_log ("BackendPagePool: bulkFetch out path b %s, total: %i, groupA: %i, groupB: %i\n", pageTypeEnumToString(mPageType), nPagesToSystemAllocate, nSplit, nPagesToSystemAllocate - nSplit);
		int cnt = 0;
		pageHeader* tail = leftovers->endCountingDumping(cnt);
		stt_dbg_log ("BackendPagePool: allocFreeList: %p, next: %p, end: %p, true end: %p, length: %i\n", leftovers, leftovers->next, leftovers->cachedWorkingEnd, tail, cnt);
		STT_STL_ASSERT(leftovers->cachedWorkingEnd == tail, "BackendPagePool freelist is corrupt");
		#endif
		
		allocFreeList = leftovers;
		mMutex.unlock();
		}
	};
	
class PassthroughPageAllocator {
public:
	//used only in debugging
	static void allocGeneric(const pageTypeEnum pageType, pageHeader** pages, const uint32_t nPages) {
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_IMPL
		if (pageType == pageTypeEnum::PAGE_TYPE_NORMAL) 
			return allocGeneric<pageU>(pages, nPages);
		else if (pageType == pageTypeEnum::PAGE_TYPE_JUMBO) 
			return allocGeneric<jumboPageU>(pages, nPages);
		else
			STT_STL_ABORT();
		#endif
		}
		
	template <typename T>
	static void allocGeneric(pageHeader** pages, const uint32_t nPages) {
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_IMPL
			#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
				ThreadSafePageAllocatorImpl::dbg_totalPagesAllocated += nPages;
			#endif
			for (uint32_t i = 0; i < nPages; ++i)
				pages[i] = (pageHeader*) new T;
		#endif
		}
		
	template <typename T>
	static void freeGeneric(pageHeader** pages, const uint32_t nPages) {
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_IMPL
			#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
				ThreadSafePageAllocatorImpl::dbg_totalPagesAllocated -= nPages;
			#endif
			for (uint32_t i = 0; i < nPages; ++i)
				delete ((T*) pages[i]);
		#endif
		}
		
	template <typename T>
	static void freeGenericList(pageHeader* pagesLinkedList) {
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR_IMPL
			pageHeader* tmp = pagesLinkedList;
			#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
			int cnt = 0;
			#endif
			while (tmp) {
				pageHeader* d = tmp;
				tmp = tmp->next;
				delete ((T*) d);
				#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
					cnt++;
				#endif
				}
			#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
				ThreadSafePageAllocatorImpl::dbg_totalPagesAllocated -= cnt;
			#endif
		#endif
		}
	};

class ThreadLocalPagePool {
public:
	// Thread_local page allocator
	pageHeader* freelist;
	pageTypeEnum mPageType;
	int nPagesInFreeList;
	
	// tuning parameters
	int requestAmount;	// no pages avaliable? request this many
	int maxFreeListAmount; // more pages than this -> (send > requestAmount) back to main
	
	// debugging
	int threadId;	
	char snstt_dbg_logBuffer[64];
	
	static std::atomic<int> staticNextId = 0;
	const static int DEFAULT_THREADLOCAL_MIN_FREELIST_PAGES = 10;
	const static int DEFAULT_THREADLOCAL_MAX_FREELIST_PAGES = 20;
	
	ThreadLocalPagePool() {}
		
	void init (const pageTypeEnum _pageType, const uint32_t _threadId) {
		mPageType = _pageType;
		freelist = NULL;
		nPagesInFreeList = 0;
		
		setMinMaxFreelistPages(DEFAULT_THREADLOCAL_MIN_FREELIST_PAGES, DEFAULT_THREADLOCAL_MAX_FREELIST_PAGES);
		
		threadId = _threadId;
		stt_memset((uint8_t*) &snstt_dbg_logBuffer[0], 0, 64);
		
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("INIT NEW ThreadLocalPagePool %s\n", getThreadLabel());
		#endif
		}
	
	~ThreadLocalPagePool() {
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("~ThreadLocalPagePool %s, nPagesInFreeList: %i\n", getThreadLabel(), nPagesInFreeList);
			dbg_print_status();
		#endif
		returnAllPages();
		}
		
	void setMinMaxFreelistPages(const uint32_t requestSize, const uint32_t maxCachedSize) {
		requestAmount = requestSize;
		maxFreeListAmount = maxCachedSize;
		STT_STL_ASSERT(maxFreeListAmount >= requestAmount*2, "freelist size must be at least twice as big as the request size");
		}
		
	void getMinMaxFreelistPages(uint32_t & requestSizeOut, uint32_t & maxCachedOut) {
		requestSizeOut = requestAmount;
		maxCachedOut = maxFreeListAmount;
		}
		
	void returnAllPages() {
		returnPagesToGlobalPool(freelist, nPagesInFreeList);
		freelist = NULL;
		}
		
	const char * getThreadLabel() {
		#if STT_STL_DEBUG_PAGE_THREAD_LABEL
			return STT_STL_DEBUG_PAGE_THREAD_LABEL(this);
		#else
			#if STT_STL_DEBUG_PAGE
				snprintf(snstt_dbg_logBuffer, 64, "[T%i %x %p]", threadId, (unsigned int) std::hash<std::thread::id>()(std::this_thread::get_id()), this);
				return snstt_dbg_logBuffer;
			#endif
		#endif
		return NULL;
		}
		
	void dbg_print_status() {
		#if STT_STL_DEBUG_PAGE
			int fll = freelist ? freelist->listLength() : 0;
			stt_dbg_log("\tThreadLocalPagePool (%s, %s): %p -> %p, %i/%i\n", pageTypeEnumToString(mPageType), getThreadLabel(), freelist, freelist ? freelist->cachedWorkingEnd : NULL, fll, nPagesInFreeList);
			if (fll != nPagesInFreeList)
				dbg_dump_freelist();
			STT_STL_ASSERT (fll == nPagesInFreeList, "freelist is corrupt (1)");
		#endif
		}
		
	void dbg_dump_freelist() {
		#if STT_STL_DEBUG_PAGE
			int i = 0;
			pageHeader* tmp = freelist;
			while (tmp) {
				stt_dbg_log("\tThreadLocalPagePool %s: Freelist %i: %p\n", getThreadLabel(), i, tmp);
				tmp = tmp->next;
				i++;
				}
			stt_dbg_log("\tThreadLocalPagePool %s: nPagesInFreeList %i, count: %i\n", getThreadLabel(), nPagesInFreeList, i);
			STT_STL_ASSERT (i == nPagesInFreeList, "freelist is corrupt (2)");
		#endif
		}
		
	inline void dbgMarkPageAllocated(pageHeader* page) {
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("ThreadLocalPagePool %s: Allocating page %p\n", getThreadLabel(), page);
		#endif
		}
	inline void dbgMarkPageFreed(pageHeader* page) {
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("ThreadLocalPagePool %s: Freeing page %p\n", getThreadLabel(), page);
		#endif
		}
	inline void dbgMarkPageFreedList(pageHeader* pagesLinkedList) {
		#if STT_STL_DEBUG_PAGE
			pageHeader* tmp = pagesLinkedList;
			while (tmp) {
				dbgMarkPageFreed(tmp);
				tmp = tmp->next;
				}
		#endif
		}
	
	void allocPages(pageHeader** pages, const uint32_t nPages) {
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR
			return PassthroughPageAllocator::allocGeneric(mPageType, pages, nPages);
		#endif
		#if STT_STL_DEBUG_PAGE
			const int listLength = freelist ? freelist->listLength() : 0;
			stt_dbg_log("ThreadLocalPagePool %s allocPages: nPages: %i, freelist length: %i, nPagesInFreeList %i -> %i \n", getThreadLabel(), nPages, listLength, nPagesInFreeList, nPagesInFreeList - nPages);
			STT_STL_ASSERT (listLength == nPagesInFreeList, "freelist is corrupt (3)");
		#endif
			
		uint32_t count = 0;
		if (freelist) {
			pageHeader* workingEnd = freelist->cachedWorkingEnd;
			while (freelist && count < nPages) {
				pages[count] = freelist;
				dbgMarkPageAllocated(pages[count]);
				count++;
				freelist = freelist->next;
				}
			if (freelist)
				freelist->cachedWorkingEnd = workingEnd;
			}
		if (count == nPages) {
			nPagesInFreeList -= count;
			return;
			}
		if (count < nPages) {
			// we are out of pages, request pages from TSPA (locking)
			const uint32_t countInit = count;
			const uint32_t want = requestAmount + nPages - count;	// Batch size + (num needed for this request)
			pageHeader* localStore[want];
			
			#if STT_STL_DEBUG_PAGE
				stt_dbg_log("ThreadLocalPagePool %s fetching from backend want: %i, nPages: %i, count: %i, (nPages - countInit): %i, requestAmount: %i\n", getThreadLabel(), want, nPages, count, (nPages-countInit), requestAmount);
			#endif
			
			if (mPageType == pageTypeEnum::PAGE_TYPE_NORMAL)
				ThreadSafePageAllocatorImpl::get().PageGlobalFreeList.bulkFetch(&localStore[0], want);
			else if (mPageType == pageTypeEnum::PAGE_TYPE_JUMBO)
				ThreadSafePageAllocatorImpl::get().JumboGlobalFreeList.bulkFetch(&localStore[0], want);
			else
				STT_STL_ABORT();
			
			#if STT_STL_DEBUG_PAGE
			{
			stt_dbg_log("ThreadLocalPagePool %s S0 localStore:\n", getThreadLabel());
			
			bool isBroken = false;
			for (uint32_t i = 0; i < want; ++i) {
				//if (i < want -1) localStore[i]->next = localStore[i+1];
				stt_dbg_log("\t%i: %p (-> %p), end: %p", i, localStore[i], localStore[i] ? localStore[i]->next : NULL, localStore[i] ? localStore[i]->cachedWorkingEnd : NULL);
				if (localStore[i]->next && i < want && localStore[i]->next != localStore[i+1]) {
					stt_dbg_log("!!! linked list is corrupt (localStore[%i] does not point to localStore[%i])", i, i+1);
					isBroken = true;
					}
				}
			if (isBroken)
				STT_STL_ABORT();
			stt_dbg_log("\n");
			}
			#endif
			
			uint32_t idx = 0;
			for (;count < nPages; ++count) {
				pages[count] = localStore[idx];
				dbgMarkPageAllocated(pages[count]);
				++idx;
				}
					
			#if STT_STL_DEBUG_PAGE
			stt_dbg_log("ThreadLocalPagePool %s S1 allocPages:\n", getThreadLabel());
				STT_STL_ASSERT(freelist == NULL, "freelist is null");
			#endif
			freelist = localStore[nPages - countInit];
			freelist->cachedWorkingEnd = localStore[want-1];
			nPagesInFreeList = requestAmount;
			
			#if STT_STL_DEBUG_PAGE
			stt_dbg_log("ThreadLocalPagePool %s S2 allocPages:\n", getThreadLabel());
				dbg_print_status();
			#endif
			}
		}
		
	
	void freePages(pageHeader** pages, const uint32_t nPages) {
		// assembles pages into a linked list, then adds to the freelist
		if (!nPages) return;
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR
			return PassthroughPageAllocator::freeGeneric<pageU>(pages, nPages);
		#endif
		freePagesList(pageHeader::buildList(pages, nPages), nPages);
		}
		
	void freePagesList(pageHeader* pagesLinkedList, const uint32_t knownCount = 0) {
		// frees an already prepared linked list of pages
		// if the number of pages is not known then knownCount 
		#ifdef STT_PASSTHROUGH_TL_PAGE_ALLOCATOR
			return PassthroughPageAllocator::freeGenericList<pageU>(pagesLinkedList);
		#endif
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("ThreadLocalPagePool %s freePagesList IN:\n", getThreadLabel());
			dbg_dump_freelist();
		#endif
		
		uint32_t realKnownCount = knownCount;
		if (!realKnownCount) {
			pageHeader* tmp = pagesLinkedList;
			while (tmp) {
				tmp = tmp->next;
				realKnownCount++;
				}
			}
		dbgMarkPageFreedList(pagesLinkedList);
			
		nPagesInFreeList += realKnownCount;	
		
		if (freelist)
			pagesLinkedList->appendList(freelist);
		freelist = pagesLinkedList;
		
		if (nPagesInFreeList > maxFreeListAmount) {
			pageHeader* returnList = freelist->splitList(requestAmount);
			const uint32_t nReturned = nPagesInFreeList - requestAmount;
			returnPagesToGlobalPool(returnList, nReturned);			
			}
			
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("ThreadLocalPagePool %s freePagesList OUT:\n", getThreadLabel());
			dbg_dump_freelist();
		#endif
		}
		
	void returnPagesToGlobalPool(pageHeader* returnList, const uint32_t nReturned) {
		if (!returnList) return;
		nPagesInFreeList -= nReturned;
		// Return pages to main cache
		if (mPageType == pageTypeEnum::PAGE_TYPE_NORMAL)
			ThreadSafePageAllocatorImpl::get().PageGlobalFreeList.atomicMerge(returnList, nReturned);
		else if (mPageType == pageTypeEnum::PAGE_TYPE_JUMBO)
			ThreadSafePageAllocatorImpl::get().JumboGlobalFreeList.atomicMerge(returnList, nReturned);
		else
			STT_STL_ABORT();
		}
	};

struct PATL_Data {
	ThreadLocalPagePool pageAlloc;
	ThreadLocalPagePool jumboPageAlloc;
	
	PATL_Data() {
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("CONSTRUCT NEW PATL_Data %p\n", this);
		#endif
		int threadId = ThreadLocalPagePool::staticNextId++;
		pageAlloc.init(pageTypeEnum::PAGE_TYPE_NORMAL, threadId);
		jumboPageAlloc.init(pageTypeEnum::PAGE_TYPE_JUMBO, threadId);
		}
	
	~PATL_Data() {
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("~PATL_Data %p\n", this);
		#endif
		}
	};
	
class ThreadSafePageAllocatorImpl {
	/// Allocates pageU's
public:
	STT_TLS_WRAPPER mTls; // Wraps the thread_local 
		
	BackendPagePool PageGlobalFreeList; // global free-list
	BackendPagePool JumboGlobalFreeList;

	static std::atomic<int> dbg_totalPagesAllocated = 0; // only used if STT_STL_TRACK_SYSTEM_ALLOCATIONS is true
	
	ThreadSafePageAllocatorImpl() {
		PageGlobalFreeList.init (pageTypeEnum::PAGE_TYPE_NORMAL, 100);
		JumboGlobalFreeList.init (pageTypeEnum::PAGE_TYPE_JUMBO, 10);
		
		
		initThreadLocalAllocators(); // init for this thread
		}
	~ThreadSafePageAllocatorImpl() {
		cleanupGlobalFreeLists();
		}
	
	static uint8_t* raw_alloc(const uint64_t sz) { return new uint8_t[sz]; }
	static void raw_free(uint8_t* ptr, const uint64_t sz) { delete[] ptr; }
	
	static ThreadSafePageAllocatorImpl& get() {
		static ThreadSafePageAllocatorImpl Instance;
		return Instance;
		}
		
	inline void perf_warning(const char * msg) {
		stt_dbg_log("stt::ThreadSafePageAllocator WARNING: %s\n", msg);
		}
		
	void initThreadLocalAllocators() {
		PATL_Data* r = mTls.getTlsData();
		if (!r)
			mTls.setTlsData(new PATL_Data);
		}
	void cleanupThreadLocalAllocators() {
		PATL_Data* r = ThreadSafePageAllocatorImpl::get().mTls.getTlsData();
		if (r) delete r;
		mTls.setTlsData(NULL);
		}
	void cleanupGlobalFreeLists() {
		PageGlobalFreeList.freeAllToSystem();
		JumboGlobalFreeList.freeAllToSystem();
		}
	PATL_Data* getThreadLocalAllocators() {
		return mTls.getTlsData();
		}
	
	// Invokes the thread_local allocators
	void allocPages(pageU** pages, const uint32_t nPages) {
		PATL_Data* LA = getThreadLocalAllocators();
		if (!LA) {
			// free after TL shutdown!
			perf_warning("PERF: allocPages() without thread_local pools, using global pool");
			PageGlobalFreeList.bulkFetch((pageHeader**) pages, nPages);
			return;
			}
		LA->pageAlloc.allocPages((pageHeader**) pages, nPages);
		}
	
	void freePages(pageU** pages, const uint32_t nPages) {
		PATL_Data* LA = getThreadLocalAllocators();
		if (!LA) {
			// free after TL shutdown!
			perf_warning("PERF: freePages() without thread_local pools, using global pool");
			PageGlobalFreeList.freePages((pageHeader**) pages, nPages);
			return;
			}
		LA->pageAlloc.freePages((pageHeader**) pages, nPages);
		}
	
	void freePagesList(pageU* pageList) {
		PATL_Data* LA = getThreadLocalAllocators();
		if (!LA) {
			// free after TL shutdown!
			perf_warning("PERF: freePagesList() without thread_local pools, using global pool");
			PageGlobalFreeList.atomicMerge((pageHeader*) pageList);
			return;
			}
		LA->pageAlloc.freePagesList((pageHeader*) pageList);
		}
	
	void allocJumboPages(pageU** pages, const uint32_t nPages) {
		PATL_Data* LA = getThreadLocalAllocators();
		if (!LA) {
			// free after TL shutdown!
			perf_warning("PERF: allocJumboPages() without thread_local pools, using global pool");
			JumboGlobalFreeList.bulkFetch((pageHeader**) pages, nPages);
			return;
			}
		LA->jumboPageAlloc.allocPages((pageHeader**) pages, nPages);
		}
	
	void freeJumboPages(pageU** pages, const uint32_t nPages) {
		PATL_Data* LA = getThreadLocalAllocators();
		if (!LA) {
			// free after TL shutdown!
			perf_warning("PERF: freeJumboPages() without thread_local pools, using global pool");
			JumboGlobalFreeList.freePages((pageHeader**) pages, nPages);
			return;
			}
		LA->jumboPageAlloc.freePages((pageHeader**) pages, nPages);
		}
			
	// Used as last resort
	static void systemAllocate(const pageTypeEnum mPageType, const uint32_t nPagesTotal, const uint32_t nSplit, pageHeader** groupA, pageHeader** groupB) {
		// Group A & B are pointers to pointers, NOT arrays of pointers
		if (mPageType == pageTypeEnum::PAGE_TYPE_NORMAL)
			systemAllocate_impl(sizeof(pageU), nPagesTotal, nSplit, groupA, groupB);
		else if (mPageType == pageTypeEnum::PAGE_TYPE_JUMBO)
			systemAllocate_impl(sizeof(jumboPageU), nPagesTotal, nSplit, groupA, groupB);
		else
			STT_STL_ABORT();
		}
		
	static void systemAllocate_impl(const uint32_t sizeofPageType, const uint32_t nPagesTotal, const uint32_t nSplit, pageHeader** groupA, pageHeader** groupB) {
		// Group A & B are pointers to pointers, NOT arrays of pointers
		// allocates at least nPagesTotal, and returns (nSplit) into linked list groupA and the rest into linked list groupB
				
		pageHeader* ph[nPagesTotal];
		ph[0] = (pageHeader*) raw_alloc(sizeofPageType);
		for (uint i = 1; i < nPagesTotal; ++i) {
			ph[i] = (pageHeader*) raw_alloc(sizeofPageType);
			ph[i-1]->next = ph[i];
			}
		ph[nPagesTotal-1]->next = NULL;
		
		// are we splitting?
		if (nSplit > 0) {
			ph[nSplit-1]->next = NULL;
			*groupA = ph[0];
			*groupB = ph[nSplit];
			
			ph[0]->cachedWorkingEnd = ph[nSplit-1];
			ph[nSplit]->cachedWorkingEnd = ph[nPagesTotal-1];
			
			#if STT_STL_DEBUG_PAGE
			//stt_dbg_log("SystemAllocate: groupB:\n");
			//int c = 0;
			//(*groupB)->endCountingDumping(c);
			#endif
			}
		else {
			*groupA = NULL;
			*groupB = ph[0];
			ph[0]->cachedWorkingEnd = ph[nPagesTotal-1];
			}
		
		#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
			dbg_totalPagesAllocated += nPagesTotal;
		#endif
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("SystemAllocate: Allocated %i (%i) pages, dbg_totalPagesAllocated: %i\n", nPagesTotal, nSplit, int(dbg_totalPagesAllocated));
		#endif
		}
		
	static void systemFreeList(pageHeader* head) {
		#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
			uint32_t nPagesTotal = 0;
		#endif
		pageHeader* w = head;
		while (w) {
			pageHeader* n = w->next;
			raw_free((uint8_t*) w, 0);
			w = n;
			#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
				nPagesTotal++;
			#endif
			}
			
		#if STT_STL_TRACK_SYSTEM_ALLOCATIONS
			dbg_totalPagesAllocated -= nPagesTotal;
		#endif
		#if STT_STL_DEBUG_PAGE
			stt_dbg_log("SystemAllocate: Freeing %i pages, total allocated: %i\n", nPagesTotal, int(dbg_totalPagesAllocated));
		#endif
		}
	};
	
	/*
	class page_based_allocator : public allocatorI {
	public:
		static page_based_allocator m_static_page_based_allocator;
		
		uint8_t* allocate(const alloc_size_t size__NOEXCEPT_OVERRIDE) {
			if (size < pageU::capacity()) {
				pageU* p = ThreadSafePageAllocator::allocPage();
				p->initHeader();
				return p->ptr();
				}
			if (size < jumboPageU::capacity()) {
				jumboPageU* p = ThreadSafePageAllocator::allocJumbo();
				p->initHeader();
				return p->ptr();
				}
			pageHeader* ph = stt_malloc(size + STT_PAGE_HEADER_SIZE);
			ph->initToZero();
			return ph->toPayload();
			}
			
		void deallocate(uint8_t* ptr, const alloc_size_t size__NOEXCEPT_OVERRIDE) {
			if (!ptr) return;
			pageHeader* ph = pageHeader::fromPayload(ptr);
			pageTypeEnum en = ph->getPageType();
			if (en == pageTypeEnum::PAGE_TYPE_NORMAL) {
				ThreadSafePageAllocator::freePage(ph);
				return;
				}
			if (en == pageTypeEnum::PAGE_TYPE_JUMBO) {
				ThreadSafePageAllocator::freeJumbo(ph);
				return;
				}
			stt_free((void*) ph);
			}
			
		};
		*/
}



