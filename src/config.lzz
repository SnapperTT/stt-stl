#hdr
// Config for stt-stl
#include <cstring>	// memcpy, etc
#include <cstdint>	// uint64_t, etc
#include <type_traits>	// needed for template stuff
#include <cstdlib>	// malloc
#include <utility>	// std::move
#include <initializer_list> // constructors, etc
#include <iterator> // std::move_iterator
#include <cstdarg> // varadic arguments

// For detection of this lib
#define STT_STL_LIB 1

// Options
#ifndef STT_STL_DEBUG
	#define STT_STL_DEBUG 0
#endif
#ifndef STT_STL_DEBUG_MEMORY
	#define STT_STL_DEBUG_MEMORY 0
#endif

// default allocator macro
// - must be a pointer to a stt::allocatorI
// - must be valid at compile time
// - must be aware of static initialisation order issues
// - (in C++ static initialisation order is not defined)
#ifndef STT_STL_DEFAULT_ALLOCATOR
	#define STT_STL_DEFAULT_ALLOCATOR ( crt_allocator::getStaticCrtAllocator() )
#endif

// Assert
#ifndef STT_STL_ASSERT
	#define STT_STL_ASSERT(X,M) assert(X && M)
	#include <assert.h>
#endif

#ifndef STT_STL_ABORT
	#define STT_STL_ABORT abort
#endif

// printf
#ifndef STT_STL_PRINT
	#define STT_STL_PRINT(X) printf("%s", X)
#endif

// debug page
#ifndef STT_STL_DEBUG_PAGE
	#define STT_STL_DEBUG_PAGE 0
#endif

// track  page allocations - if STT_STL_DEBUG_PAGE is on then
// force enable STT_STL_TRACK_SYSTEM_ALLOCATIONS
#ifndef STT_STL_TRACK_SYSTEM_ALLOCATIONS
	#define STT_STL_TRACK_SYSTEM_ALLOCATIONS STT_STL_DEBUG_PAGE
#else
	#if STT_STL_DEBUG_PAGE
		#undef STT_STL_TRACK_SYSTEM_ALLOCATIONS
		#define STT_STL_TRACK_SYSTEM_ALLOCATIONS STT_STL_DEBUG_PAGE
	#endif
#endif

// Size types
// define the macro to if you wish to override with your own types
#ifndef STT_STL_SIZE_TYPES
	#define STT_STL_SIZE_TYPES
	namespace stt {
		typedef uint32_t storage_size_t;
		typedef uint64_t alloc_size_t;
		typedef uint64_t string_size_t;
		}
#endif

// Span
// uncomment to use std::span instead of stt::span
//#define STT_STL_SPAN std::span 

#end


#src
#end
