namespace stt {
class PageBumpAllocatedStorage {
	public:
	#warning move to new file
		// used for collections of small objects with similar lifetimes. Stores them in a page
		pageU* page; // custom fields being used - totalSize = totalAllocations
		
		PageBumpAllocatedStorage() {
			page = ThreadSafePageAllocator::allocPage();
			page->initHeader();
			}
		
		~PageBumpAllocatedStorage() {
			STT_STL_ASSERT(page->ph.totalSize == 0, ""); //remaning allocations
			ThreadSafePageAllocator::freePage(page);
			page = NULL;
			}
		
		template <typename T>
		inline static STT_CONSTEXPR__uint32_t roundedSizeOf() { return sizeof(T); }
		
		inline bool contains(void* ptr) const {
			uintptr_t pagei = uintptr_t(page);
			uintptr_t ptri = uintptr_t(ptr);
			return (ptri >= pagei) && (pagei < pagei + page->storageSize());
			}
		
		template <typename T>
		T* allocate() {
			T* r = (T*) &(page->ptr()[page->ph.localSize]);
			page->ph.localSize += roundedSizeOf<T>();
			page->ph.totalSize++;
			new (r) T();
			return r;
			}
		
		template <typename T>
		void free(T* t) {
			if (page->ph.localSize == (uintptr_t(t) - uintptr_t(page)) + roundedSizeOf<T>()) {
				page->ph.localSize -= sizeof(T);
				}
			page->ph.totalSize--;
			t->~T();
			}
			
		uint32_t getNumAllocations() const { return page->ph.totalSize; }
		uint32_t getFreeBytes() const { return page->capacity() - page->ph.localSize; }
		};
	}
