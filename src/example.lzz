#hdr
#define STT_STL_DEBUG 1
#define STT_STL_DEBUG_MEMORY 1
#include "stt-stl.h"
#define STT_STL_IMPL 1
//#include <span>
//#define STT_STL_SPAN std::span
#include <type_traits>

#end

#src
#include <cstdio>
#include <iostream>
#include "stt-stl.h"
#define STT_DEBUG_PAGE 1
#include "stt-pages.h"

//#include <string>
//#include <vector>
//#define ANKERL_NANOBENCH_IMPLEMENT
//#include "3rd_party/nanobench.h"
//#include "benchmark_tests.h"

namespace stt {
	template <typename T>
	using small_vector64 = small_vector<T, 64, uint16_t>;
	}
#end
	
	
int main (int argc, char ** argv) {
	//printf("Hello\n");
	static stt::crt_allocator alloc;
	stt::setDefaultAllocator(&alloc);
	
	//std::cout << ctti_get_type_name<stt::string24>() << std::endl;
	//return 0;

	stt::ThreadSafePageAllocator::initThreadLocalAllocators();
	
	stt::pageI* p = stt::ThreadSafePageAllocator::allocPage();
	std::cout << p << std::endl;
	
	stt::ThreadSafePageAllocator::freePage(p);
	stt::ThreadSafePageAllocator::cleanupThreadLocalAllocators();
	stt::ThreadSafePageAllocatorImpl::get().cleanupGlobalFreeLists();
	
	#if 0
	for (int testId = 0; testId < 64; ++testId) {
		ankerl::nanobench::Bench b;
		//b.clockResolutionMultiple(10); // fast
		b.clockResolutionMultiple(10000000); // accurate
		b.relative(true);
		b.performanceCounters(true);
		
		b.title(stt_benchmarks::vectorTests<stt_benchmarks::nullContainer, std::vector>(&b, NULL, testId));
		stt_benchmarks::vectorTests<void, std::vector>(&b, "std::vector", testId);
		stt_benchmarks::vectorTests<void, stt::vector24>(&b, "stt::vector24", testId);
		
		stt_benchmarks::vectorTests<void, stt::small_vector64>(&b, "stt::small_vector<T, 64, uint16_t>", testId);
		}
	#endif
	
	#if 0
	for (int testId = 0; testId < 64; ++testId) {
		ankerl::nanobench::Bench b;
		//b.clockResolutionMultiple(10); // fast
		b.clockResolutionMultiple(10000000); // accurate
		b.relative(true);
		b.performanceCounters(true);
		
		b.title(stt_benchmarks::stringTests<stt_benchmarks::nullContainer, std::string>(&b, NULL, testId));
		stt_benchmarks::stringTests<void, std::string>(&b, "std::string", testId);
		stt_benchmarks::stringTests<void, stt::string24>(&b, "stt::string24", testId);
		stt_benchmarks::stringTests<void, stt::string64>(&b, "stt::string64", testId);
		}
	#endif
	
	return 0;
	}

