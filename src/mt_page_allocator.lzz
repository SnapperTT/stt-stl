#hdr
#end

#src
namespace stt {
	int dbg_getNPagesAllocated_forward() { return ThreadSafePageAllocator::dbg_getNPagesAllocated(); }
	}
#end

namespace stt {
class ThreadSafePageAllocator {
	// Public facing api for the allocator
public:
	static void initThreadLocalPools() {
		// MUST be called on thread startup!
		ThreadSafePageAllocatorImpl::get().initThreadLocalPools();
		}
	static void cleanupThreadLocalPools() {
		// MUST be called on thread end!
		ThreadSafePageAllocatorImpl::get().cleanupThreadLocalPools();
		}
	static uint32_t cleanupBackendPools() {
		// Releases all pages owned by the backend pool back to system memory
		// if macro STT_STL_TRACK_SYSTEM_ALLOCATIONS is defined then returns number of pages returned		
		return ThreadSafePageAllocatorImpl::get().cleanupBackendPools();
		}
	static PATL_Data* getThreadLocalPools() {
		return ThreadSafePageAllocatorImpl::get().getThreadLocalPools();
		}
	static ThreadLocalPagePool* getThreadLocalPool(const pageTypeEnum pe) {
		PATL_Data* PD = ThreadSafePageAllocatorImpl::get().getThreadLocalPools();
		if (!PD) return NULL;
		if (pe == pageTypeEnum::PAGE_TYPE_NORMAL) return &PD->pageAlloc;
		if (pe == pageTypeEnum::PAGE_TYPE_JUMBO) return &PD->jumboPageAlloc;
		return NULL;
		}
	static BackendPagePool* getBackendPool(const pageTypeEnum pe) {
		if (pe == pageTypeEnum::PAGE_TYPE_NORMAL) return &ThreadSafePageAllocatorImpl::get().PageGlobalFreeList;
		if (pe == pageTypeEnum::PAGE_TYPE_JUMBO) return &ThreadSafePageAllocatorImpl::get().JumboGlobalFreeList;
		return NULL;
		}
	
	// PageI
	static pageU* allocPage() {
		// Allocates a single pageU
		pageU* arr[1];
		ThreadSafePageAllocatorImpl::get().allocPages(&arr[0], 1);
		return arr[0];
		}
	static void freePage(pageU* page) {
		pageU* arr[1];
		arr[0] = page;
		ThreadSafePageAllocatorImpl::get().freePages(&arr[0], 1);
		}
	static void allocPages(pageU** pages, const uint32_t nPages) { ThreadSafePageAllocatorImpl::get().allocPages(pages, nPages); }
	static void freePages(pageU** pages, const uint32_t nPages)  { ThreadSafePageAllocatorImpl::get().freePages(pages, nPages); }
	// Because a array of pages is internally converted into a linked list it is more efficent a linked list directly
	static void freePagesList(pageU* pageLinkedList) { ThreadSafePageAllocatorImpl::get().freePagesList(pageLinkedList); }
	
	// JumboPageU
	static jumboPageU* allocJumboPage() {
		// Allocates a single pageU
		jumboPageU* arr[1];
		ThreadSafePageAllocatorImpl::get().allocJumboPages(&arr[0], 1);
		return arr[0];
		}
	static void freeJumboPage(jumboPageU* page) {
		jumboPageU* arr[1];
		arr[0] = page;
		ThreadSafePageAllocatorImpl::get().freeJumboPages(&arr[0], 1);
		}
	static void allocJumboPages(jumboPageU** pages, const uint32_t nPages) { ThreadSafePageAllocatorImpl::get().allocJumboPages(pages, nPages); }
	static void freeJumboPages(jumboPageU** pages, const uint32_t nPages)  { ThreadSafePageAllocatorImpl::get().freeJumboPages(pages, nPages); }
	// Because a array of pages is internally converted into a linked list it is more efficent a linked list directly
	static void freeJumboPagesList(jumboPageU* pageLinkedList) { ThreadSafePageAllocatorImpl::get().freeJumboPagesList(pageLinkedList); }
	
	static int dbg_getNPagesAllocated() { return ThreadSafePageAllocatorImpl::dbg_totalPagesAllocated; }
	};
	
namespace ThreadSafePageAllocatorTemplates {
	// Used for template stuff that is forbidden in classes
	template<typename T> T*   allocGeneric()    { STT_STL_ABORT(); return NULL; }
	template<typename T> void freeGeneric(T* t) { STT_STL_ABORT(); }
	template<typename T> void allocGenericBatch(T** t, const uint32_t n) { STT_STL_ABORT(); }
	template<typename T> void freeGenericBatch (T** t, const uint32_t n) { STT_STL_ABORT(); }
	template<typename T> void freeGenericList(T* t) { STT_STL_ABORT(); }
	
	
	template<> inline pageU* allocGeneric()      { return ThreadSafePageAllocator::allocPage(); }
	template<> inline void freeGeneric(pageU* t) { ThreadSafePageAllocator::freePage(t); }
	template<> inline void allocGenericBatch(pageU** t, const uint32_t n) { ThreadSafePageAllocator::allocPages(t, n); }
	template<> inline void freeGenericBatch (pageU** t, const uint32_t n) { ThreadSafePageAllocator::freePages(t, n); }
	template<> inline void freeGenericList(pageU* t) { ThreadSafePageAllocator::freePagesList(t); }
	
	template<> inline jumboPageU* allocGeneric()      { return ThreadSafePageAllocator::allocJumboPage(); }
	template<> inline void freeGeneric(jumboPageU* t) { ThreadSafePageAllocator::freeJumboPage(t); }
	template<> inline void allocGenericBatch(jumboPageU** t, const uint32_t n) { ThreadSafePageAllocator::allocJumboPages(t, n); }
	template<> inline void freeGenericBatch (jumboPageU** t, const uint32_t n) { ThreadSafePageAllocator::freeJumboPages(t, n); }
	template<> inline void freeGenericList(jumboPageU* t) { ThreadSafePageAllocator::freeJumboPagesList(t); }
	}
}
